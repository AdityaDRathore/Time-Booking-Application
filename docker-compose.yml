version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tb-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-time_booking}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tb-network

  # Redis for Caching and WebSocket pub/sub
  redis:
    image: redis:7-alpine
    container_name: tb-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispassword}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tb-network

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: tb-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=development
      - PORT=4000
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-time_booking}?schema=public
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispassword}@redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redispassword}
      - JWT_SECRET=${JWT_SECRET:-dev_jwt_secret_key}
      - JWT_ACCESS_EXPIRATION=15m
      - JWT_REFRESH_EXPIRATION=7d
      - CORS_ORIGIN=http://localhost:3000
      - LOG_LEVEL=debug
    ports:
      - "${BACKEND_PORT:-4000}:4000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - tb-network
    command: npm run dev

  # Frontend Development Server
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: tb-frontend
    depends_on:
      - backend
    environment:
      - VITE_API_URL=http://localhost:${BACKEND_PORT:-4000}/api
      - VITE_WS_URL=ws://localhost:${BACKEND_PORT:-4000}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - tb-network
    command: npm run dev

  # Prisma Studio (Database Management UI)
  prisma-studio:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: tb-prisma-studio
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-time_booking}?schema=public
    ports:
      - "${PRISMA_STUDIO_PORT:-5555}:5555"
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - tb-network
    command: npx prisma studio --hostname 0.0.0.0

  # MailHog for Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: tb-mailhog
    ports:
      - "${MAILHOG_SMTP_PORT:-1025}:1025" # SMTP port
      - "${MAILHOG_UI_PORT:-8025}:8025"   # Web UI port
    networks:
      - tb-network

networks:
  tb-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: